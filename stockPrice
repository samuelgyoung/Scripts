#!/usr/bin/env bash
#
# Author:
#   Newton (@chrisohpedia)
#
# Description:
#   Get stock quotes
#
# Dependencies:
#   None
#
# Configuration:
#   @param   stock_ticker    required
#
# Usage:
#   `stock aapl`

readonly PROGNAME=$(basename "$0")
readonly PROGDIR=$(readlink "$(dirname "$0")")
readonly ARGS="$*"

_usage() {
	printf "%s: usage: %s [-h|--help] [-c]  %sstock ticker,[stock ticker]%s" "$PROGNAME" "$PROGNAME" "$(tput smul)" "$(tput rmul)"
}

is_empty() {
	local var=$1
	[[ -z $var ]]
}

is_not_empty() {
	local var=$1
	[[ -n $var ]]
}

_is_not_valid_option() {
	local option=$1
	printf "bash: %s: %s: invalid option\n" "$PROGNAME" "$option"
}

_get_stock() {
	local stock=$1;

	if [[ -n "${changed}" ]]; then
		stock="$(echo '-c aapl,rubi' | sed -E 's/-{1,2}c //')"
	fi
	#local url="http://download.finance.yahoo.com/d/quotes.csv?s=$stock&f=l1$changed"
	
	#symbol  	price	  p/e	    peg    Day_range      52-weekrang    Day_high       Day_low        
	# 52-week_High   52-week_Low    EPS_Estimate_Current_Year       EPS_Estimate_Next_Year Price/Sales     
	# EPS_Estimate_Next_Quarter       Market_Capitalization   Volume  Average_Daily_Volume    Previous_Close  Short_Ratio
	local url="http://download.finance.yahoo.com/d/quotes.csv?s=$stock&f=sl1rr5mwhgkje7e8p5e9j1va2ps7"
	
	data=`curl -s "${url}"`
	
	price=`echo $data | sed 's/,/ /g' | awk '{print $2}'`
	p_e=`echo $data | sed 's/,/ /g' | awk '{print $3}'`
	peg=`echo $data | sed 's/,/ /g' | awk '{print $4}'`
	Day_range=`echo $data | sed 's/ //g' | sed 's/,/ /g' | awk '{print $5}'`
	weekrang=`echo $data | sed 's/ //g' | sed 's/,/ /g' | awk '{print $6}'`
	DayHigh=`echo $data | sed 's/ //g' | sed 's/,/ /g' | awk '{print $7}'`
	DayLow=`echo $data | sed 's/ //g' | sed 's/,/ /g' | awk '{print $8}'`
	High52Week=`echo $data | sed 's/ //g' | sed 's/,/ /g' | awk '{print $9}'`
	Low52Week=`echo $data | sed 's/ //g' | sed 's/,/ /g' | awk '{print $10}'`
	EPS_Estimate_Current_Year=`echo $data | sed 's/ //g' | sed 's/,/ /g' | awk '{print $11}'`
	EPS_Estimate_Next_Year=`echo $data | sed 's/ //g' | sed 's/,/ /g' | awk '{print $12}'`
	PriceToSales=`echo $data | sed 's/ //g' | sed 's/,/ /g' | awk '{print $13}'`
	EPSEstimateNextQuarter=`echo $data | sed 's/ //g' | sed 's/,/ /g' | awk '{print $14}'`
	MarketCapitalization=`echo $data | sed 's/ //g' | sed 's/,/ /g' | awk '{print $15}'`
	volume=`echo $data | sed 's/ //g' | sed 's/,/ /g' | awk '{print $16}'`
	averageDailyVolume=`echo $data | sed 's/ //g' | sed 's/,/ /g' | awk '{print $17}'`
	PreviousClose=`echo $data | sed 's/ //g' | sed 's/,/ /g' | awk '{print $18}'`
	ShortRatio=`echo $data | sed 's/ //g' | sed 's/,/ /g' | awk '{print $19}'`
	echo "{"
	#price=`curl -s "${url}"`
	
	
	
	
	theDate=`date +%Y%m%d%H%M%S`
	echo  "\"_id\" : \"$1-$theDate\","
	echo  "\"symbol\" : \"$1\","
	echo  "\"price\" : "$price","
	echo  "\"p/e\" : "$p_e","
	echo  "\"peg\" : "$peg","
	echo  "\"dayRange\" : "$Day_range","
	echo  "\"52WeekRange\" : "$weekrang","
	echo  "\"dayHigh\" : "$DayHigh","
	echo  "\"dayLow\" : "$DayLow","
	echo  "\"52WeekHigh\" : "$High52Week","
	echo  "\"52WeekLow\" : "$Low52Week","
	echo  "\"EPSEstimateCurrentYear\" : "$EPS_Estimate_Current_Year","
	echo  "\"EPSEstimateNextYear\" : "$EPS_Estimate_Next_Year","
	echo  "\"priceToSales\" : "$PriceToSales","
	echo  "\"EPSEstimateNextQuarter\" : "$EPSEstimateNextQuarter","
	echo  "\"marketCapitalization\" : "\"$MarketCapitalization\"","
	echo  "\"volume\" : "$volume","
	echo  "\"averageDailyVolume\" : "$averageDailyVolume","
	echo  "\"previousClose\" : "$PreviousClose","
	echo  "\"shortRatio\" : "$ShortRatio","
	echo  "\"date\" : "$theDate
	echo "}"
}

_cmdline() {
	# got this idea from here:
	# http://kirk.webfinish.com/2009/10/bash-shell-script-to-use-getopts-with-gnu-style-long-positional-parameters/
	local arg=
	for arg
	do
		local delim=""
		case "$arg" in
			#translate --gnu-long-options to -g (short options)
			--changed)        args="${args}-c ";;
			--help)           args="${args}-h ";;
			#pass through anything else
			*) [[ "${arg:0:1}" == "-" ]] || delim="\""
				args="${args}${delim}${arg}${delim} ";;
		esac
	done

	#Reset the positional parameters to the short options
	eval set -- "${args}"

	while getopts ":ch" OPTION
	do
		case $OPTION in
			c)
				changed="c1"
				;;
			h)
				_usage
				exit 0
				;;
			\?)
				_is_not_valid_option "-$OPTARG"
				_usage
				exit 1
				;;
		esac
	done

	return 0
}

main() {
	_cmdline "${ARGS}"

	is_empty "${ARGS}" \
		&& _usage

	is_not_empty "${ARGS}" \
		&& _get_stock "${ARGS}"
}

main
